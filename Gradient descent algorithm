 import tensorflow as tf
 @tf.function         
def compute_loss_and_grads(
    combination_image, base_image, style_reference_image):
 with tf.GradientTape() as tape:
 loss = compute_loss(
    combination_image, base_image, style_reference_image)
    grads = tape.gradient(loss, combination_image)
 return loss, grads
 optimizer = keras.optimizers.SGD(
 keras.optimizers.schedules.ExponentialDecay(    
initial_learning_rate=100.0, decay_steps=100, decay_rate=0.96 
    )
 )

 base_image = preprocess_image(base_image_path)
 style_reference_image = preprocess_image(style_reference_image_path)
 combination_image = tf.Variable(preprocess_image(base_image_path))  
iterations = 4000 
for i in range(1, iterations + 1): 
    loss, grads = compute_loss_and_grads(
 combination_image, base_image, style_reference_image
    )
    optimizer.apply_gradients([(grads, combination_image)])  
if i % 100 == 0:
 print(f"Iteration {i}: loss={loss:.2f}")
 img = deprocess_image(combination_image.numpy())
 fname = f"combination_image_at_iteration_{i}.png" 
keras.utils.save_img(fname, img) 
